CREATE OR REPLACE FUNCTION change_owner()
RETURNS event_trigger
LANGUAGE plpgsql
AS $$
DECLARE
    obj record;
BEGIN
    FOR obj IN (SELECT objid, classid, objsubid FROM pg_event_trigger_ddl_commands()) LOOP
        -- Verifica se o objeto pertence ao schema 'dbo'
        IF (SELECT nspname FROM pg_namespace WHERE oid = obj.objid) = 'dbo' THEN
            -- Altera o proprietário para 'dbo'
            EXECUTE 'ALTER ' || CASE
                WHEN obj.classid = 'pg_class'::regclass THEN 'TABLE'
                WHEN obj.classid = 'pg_proc'::regclass THEN 'FUNCTION'
                WHEN obj.classid = 'pg_namespace'::regclass THEN 'SCHEMA'
                WHEN obj.classid = 'pg_view'::regclass THEN 'VIEW'
                END || ' ' || obj.objid || ' OWNER TO dbo';
        END IF;
    END LOOP;
END;
$$;

-- Cria a trigger para executar a função 'change_owner' no final de comandos DDL
CREATE EVENT TRIGGER change_owner_trigger
    ON ddl_command_end
    EXECUTE FUNCTION change_owner();


/*
Primeiro, você precisará criar uma função que será chamada pelo TRIGGER para alterar o proprietário do objeto. Aqui está um exemplo de função:

Esta função verifica o tipo de objeto (tabela, visualização ou procedimento) criado e se ele pertence ao schema "dbo". Se ambas as condições forem atendidas, ela executa a instrução ALTER para alterar o proprietário para "dbo".

Em seguida, você precisa criar o TRIGGER para chamar essa função sempre que um evento de criação ocorrer. Para isso, você deve habilitar os eventos de DDL (Data Definition Language) no PostgreSQL. No arquivo de configuração postgresql.conf, verifique se a opção track_functions está definida como 'all'.

Agora, você pode criar o TRIGGER para chamar a função change_owner:


*/


---
--
SELECT tgname FROM pg_trigger WHERE tgname = 'change_owner_trigger';

-- Listar todas as triggers de evento no banco de dados
SELECT evtname, evtevent, evtowner
FROM pg_event_trigger;

-- Excluir a trigger "change_owner_trigger"
DROP EVENT TRIGGER IF EXISTS change_owner_trigger;
