###############################################################################
#Script utilizado para criar logins ou alterar senhas de usuarios no Babelfish
#Data: 2023-11-10
#Autor: Marcus Pinto
###############################################################################

#Etapa 01 - Conexao com a instancia
try {
    # Parâmetros de entrada para a conexão
    $ServerName = Read-Host "Digite o nome do servidor SQL"
    $Login = Read-Host "DBA - Entre com seu Login"
    $SecurePassword = Read-Host "DBA - Digite sua senha" -AsSecureString

    # Converte a senha de SecureString para String
    $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePassword)
    $Password = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)

    # Estabelece a conexão com o SQL Server usando a autenticação "SQL Server Authentication"
    $Connection = New-Object System.Data.SqlClient.SqlConnection
    $Connection.ConnectionString = "Server=$ServerName;User ID=$Login;Password=$Password;Database=master;Integrated Security=False;"
    $Connection.Open()
}
catch {
    Write-Host "Erro ao conectar ao servidor SQL. Detalhes: $_"
    return
}

#Etapa 02 - Selecao das opcoes 1 para criacao de login e 2 para alterar senha
try {
    # Solicitar ao usuário escolher entre criar novo login ou alterar senha
    $Choice = Read-Host "Digite 1 para criar novo Login ou digite 2 para alterar a senha de login existente"

  if ($Choice -eq "1") {
    # Parâmetros de entrada para criar o novo login
    $NewLogin = Read-Host "Insira o login do NOVO USUÁRIO"

    # Solicitar a senha e confirmar a senha
    $NewPassword = Read-Host "Digite a senha" -AsSecureString
    $ConfirmPassword = Read-Host "Confirme a senha" -AsSecureString

    # Converte as senhas de SecureString para String
    $BSTR1 = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($NewPassword)
    $NewPasswordString = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR1)

    $BSTR2 = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($ConfirmPassword)
    $ConfirmPasswordString = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR2)

    # Verificar se as senhas coincidem
    if ($NewPasswordString -eq $ConfirmPasswordString) {
        # Comando SQL para criar o login
        $SqlCommand = @"
        USE MASTER
        CREATE LOGIN "$NewLogin" WITH PASSWORD = '$NewPasswordString'   
"@

        # Executa o comando no servidor
        $Command = $Connection.CreateCommand()
        $Command.CommandText = $SqlCommand
        $Command.ExecuteNonQuery()
        Write-Host "Login '$NewLogin' criado com sucesso."
    } else {
        Write-Host "As senhas não coincidem. Operação cancelada. Nenhum login foi criado."
    }
}
elseif ($Choice -eq "2") {
    # Parâmetros de entrada para alterar a senha do login existente
    $ExistingLogin = Read-Host "Insira o login do USUÁRIO existente"

    # Solicitar a nova senha e confirmar a senha
    $NewPassword = Read-Host "Digite a nova senha" -AsSecureString
    $ConfirmPassword = Read-Host "Confirme a nova senha" -AsSecureString

    # Converte as senhas de SecureString para String
    $BSTR1 = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($NewPassword)
    $NewPasswordString = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR1)

    $BSTR2 = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($ConfirmPassword)
    $ConfirmPasswordString = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR2)

    # Verificar se as senhas coincidem
    if ($NewPasswordString -eq $ConfirmPasswordString) {
        # Comando SQL para alterar a senha do login
        $SqlCommand = @"
        USE MASTER
        ALTER LOGIN "$ExistingLogin" WITH PASSWORD = '$NewPasswordString'   
"@

        # Executa o comando no servidor
        $Command = $Connection.CreateCommand()
        $Command.CommandText = $SqlCommand
        $Command.ExecuteNonQuery()
        Write-Host "Senha do login '$ExistingLogin' alterada com sucesso."
    } else {
        Write-Host "As senhas não coincidem. Operação cancelada. Nenhuma alteração feita."
    }
}
else {
    Write-Host "Opção inválida. Operação cancelada."
}
}
catch {
    Write-Host "Ocorreu um erro durante o processo. Detalhes: $_"
}
finally {
    # Fecha a conexão apenas se estiver aberta
    if ($Connection.State -eq 'Open') {
        $Connection.Close()
    }
}
